# 可设置级别：TRACE→DEBUG→INFO→WARNING→ERROR→FATAL→OFF
# 高级别level会屏蔽低级别level。
# debug：显示debug、info、error
# info：显示info、error

#log4j.rootLogger=DEBUG,console,file
#子类重新定义日志级别，logger的名字是日志类的权限类名
#log4j.logger.org.linkinpark.commons.logtest.Log4jTest1=ERROR
#子类重新定义日志级别，category的名字是日志类的包名，可以将category理解为Java的package。
#log4j.category.org.linkinpark.commons.logtest1=ERROR,file,rolling_file,daily_rolling_file
log4j.rootLogger=DEBUG,console,daily_rolling_file

# 以下是rootLogger的配置，子类默认继承，但是子类重写下面配置=rootLogger+自己配置，我晕
#输出到控制台
log4j.appender.console=org.apache.log4j.ConsoleAppender
#设置输出样式
log4j.appender.console.layout=org.apache.log4j.PatternLayout 
#日志输出信息格式为
log4j.appender.console.layout.ConversionPattern=[%-d{yyyy-MM-dd HH:mm:ss}]-[%t-%5p]-[%C-%M(%L)]： %m%n 
#DEBUG以上级别输出，Threshold，入口，临界值
#log4j.appender.console.Threshold=DEBUG
#日志编码方式
#log4j.appender.console.Encoding=UTF-8
#是否立即输出
#log4j.appender.console.ImmediateFlush=true
#使用System.error作为输出
#log4j.appender.console.Target=System.error

#输出到文件(这里默认为追加方式)
log4j.appender.file=org.apache.log4j.FileAppender 
#输出文件位置
log4j.appender.file.File=D:/log/log4j.log
#是否在原日志基础上追加输出日志。true，默认，追加。false，清掉原来日志重新添加
log4j.appender.file.Append=true
#样式为TTCCLayout
#log4j.appender.file.layout=org.apache.log4j.TTCCLayout
#样式为HTMLLayout
log4j.appender.file.layout=org.apache.log4j.HTMLLayout

#log4j.appender.file.layout=org.apache.log4j.PatternLayout
#log4j.appender.file.layout.ConversionPattern=[%-d{yyyy-MM-dd HH:mm:ss}]-[%t-%5p]-[%C-%M(%L)]： %m%n

#按大小滚动文件(这里默认为追加方式)
log4j.appender.rolling_file=org.apache.log4j.RollingFileAppender 
#输出文件位置
log4j.appender.rolling_file.File=/D:/log/rolling_log4j.log
log4j.appender.rolling_file.Append=true
#文件达到最大值自动更名
log4j.appender.rolling_file.MaxFileSize=1KB
#最多备份100个文件
log4j.appender.rolling_file.MaxBackupIndex=100
log4j.appender.rolling_file.layout=org.apache.log4j.PatternLayout
log4j.appender.rolling_file.layout.ConversionPattern=[%-d{yyyy-MM-dd HH:mm:ss}]-[%t-%5p]-[%C-%M(%L)]： %m%n

#按日期滚动文件
log4j.appender.daily_rolling_file=org.apache.log4j.DailyRollingFileAppender 
#输出文件位置
log4j.appender.daily_rolling_file.File=/D:/log/daily_rolling_log4j.log
#文件滚动日期格式
#每天：.YYYY-MM-dd（默认）
#每星期：.YYYY-ww
#每月：.YYYY-MM
#每隔半天：.YYYY-MM-dd-a
#每小时：.YYYY-MM-dd-HH
#每分钟：.YYYY-MM-dd-HH-mm
#log4j.appender.daily_rolling_file.DatePattern=.yyyy-MM-dd
log4j.appender.daily_rolling_file.DatePattern=.YYYY-MM-dd-HH-mm
log4j.appender.daily_rolling_file.layout=org.apache.log4j.PatternLayout
log4j.appender.daily_rolling_file.layout.ConversionPattern=[%-d{yyyy-MM-dd HH:mm:ss}]-[%t-%5p]-[%C-%M(%L)]： %m%n

#自定义样式
#%c 输出所属的类目，通常就是所在类的全名
#%C 输出Logger所在类的名称，通常就是所在类的全名
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}，%d{ABSOLUTE}，%d{DATE}
#%F 输出所在类的类名称，只有类名。
#%l 输出语句所在的行数，包括类名+方法名+文件名+行数
#%L 输出语句所在的行数，只输出数字
#%m 输出代码中指定的讯息，如log(message)中的message
#%M 输出方法名
#%p 输出日志级别，即DEBUG，INFO，WARN，ERROR，FATAL
#%r 输出自应用启动到输出该log信息耗费的毫秒数
#%t 输出产生该日志事件的线程名
#%n 输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n”
#%% 用来输出百分号“%”
#log4j.appender.Linkin.layout.ConversionPattern=%n[%l%d{yy/MM/dd HH:mm:ss:SSS}][%C-%M] %m
#log4j.appender.Linkin.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss}[%C]-[%p] %m%n
#log4j.appender.Linkin.layout.ConversionPattern = %d{ABSOLUTE} %5p %t %c{2}:%L - %m%n